openapi: 3.1.0
info:
  title: Fastlearners Auth/Profile API
  version: 0.1.0
servers:
  - url: https://fastlearnersapp.com
paths:
  /api/v1/register:
    post:
      summary: Register a new user by email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Verification code sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /api/v1/verify-email:
    post:
      summary: Verify email using 6-digit code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, code]
              properties:
                email:
                  type: string
                  format: email
                code:
                  type: string
      responses:
        '200':
          description: Email verified
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      content:
                        $ref: '#/components/schemas/AuthTokens'
        '400': { description: Invalid or expired code }
        '404': { description: Registration request not found }
        '422': { description: Validation error }
  /api/v1/create-password:
    post:
      summary: Create password after successful verification
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password, password_confirmation]
              properties:
                password: { type: string }
                password_confirmation: { type: string }
      responses:
        '200': { description: Password created, proceed to set role }
        '422': { description: Validation error }
        '400': { description: Generic error }
  /api/v1/set-role:
    post:
      summary: Set the user role (guest|student|guardian)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_role]
              properties:
                user_role:
                  type: string
                  enum: [guest, student, guardian]
      responses:
        '200': { description: Role set }
        '422': { description: Validation error }
        '400': { description: Invalid role }
  /api/v1/resend-verification-code:
    post:
      summary: Resend registration verification code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, format: email }
      responses:
        '200': { description: Code resent }
        '422': { description: Validation error }
        '404': { description: User not found }
        '500': { description: Sending error }
  /api/v1/login:
    post:
      summary: Login with email/phone and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email_phone, password]
              properties:
                email_phone: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Logged in
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      content:
                        $ref: '#/components/schemas/AuthTokens'
        '401': { description: Invalid credentials or inactive }
        '400': { description: Suspended }
        '422': { description: Validation error }
  /api/v1/google/redirect:
    post:
      summary: Login/Register with Google
      responses:
        '200': { description: Success }
  /api/v1/logout:
    post:
      summary: Logout current user
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: Logged out }
        '401': { description: Unauthorized }
  /api/v1/profile:
    get:
      summary: Get user profile
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Profile details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      content:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '401': { description: Unauthorized }
  /api/v1/profile/edit:
    post:
      summary: Edit user profile
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdateData'
      responses:
        '200':
          description: Updated profile
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      content:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
        '422': { description: Validation error }
        '401': { description: Unauthorized }
  /api/v1/profile/edit/password:
    post:
      summary: Change password
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [current_password, new_password, new_password_confirmation]
              properties:
                current_password: { type: string }
                new_password: { type: string }
                new_password_confirmation: { type: string }
      responses:
        '200': { description: Password changed }
        '422': { description: Validation error or incorrect current password }
        '401': { description: Unauthorized }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiResponse:
      type: object
      properties:
        success: { type: boolean }
        message: { type: string }
        content: {}
        errors:
          anyOf:
            - type: object
            - type: 'null'
        code: { type: integer }
      required: [success, message, code]
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: ["string", "null"] }
        username: { type: ["string", "null"] }
        email: { type: string }
        phone: { type: ["string", "null"] }
        school: { type: ["string", "null"] }
        class: { type: ["string", "null"] }
        date_of_birth: { type: ["string", "null"] }
        country: { type: ["string", "null"] }
        state: { type: ["string", "null"] }
        city: { type: ["string", "null"] }
        address: { type: ["string", "null"] }
        gender: { type: ["string", "null"] }
        status: { type: string }
        created_at: { type: string }
        role:
          type: array
          items: { type: string }
    AuthTokens:
      type: object
      properties:
        access_token: { type: string }
        user: { $ref: '#/components/schemas/User' }
      required: [access_token, user]
    ProfileUpdateData:
      type: object
      properties:
        name: { type: string }
        username: { type: string }
        phone: { type: string }
        school: { type: string }
        class: { type: string }
        date_of_birth: { type: string }
        country: { type: string }
        state: { type: string }
        city: { type: string }
        address: { type: string }
        gender: { type: string }
        role: { type: string }
        child_email: { type: string }
        child_phone: { type: string }